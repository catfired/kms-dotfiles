(defpoll brightness :interval "30ms" "scripts/get_brightness")
(defpoll output-volume :interval "30ms" "scripts/get_output_volume")
(defpoll output-volume-icon :interval "30ms" "scripts/get_output_volume_icon")
(defpoll input-volume :interval "30ms" "scripts/get_input_volume")
(defpoll input-volume-icon :interval "30ms" "scripts/get_input_volume_icon")
(defpoll uptime :interval "1s" "scripts/get_uptime")
(defpoll workspaces-json :interval "30ms" "scripts/bar/get_workspaces")
(defpoll window-title :interval "30ms" "scripts/bar/get_window")
(defpoll keybinds :interval "500s" "scripts/get_keybinds")



(defwidget metric [label value ?onchange ?onclick]
           (box :orientation "h"
                :class "metric"
                :space-evenly true
                (box :class "metric-label"
                     (button :onclick onclick
                             :class "metric-label-text"
                             :halign "center"
                             label
                     )
                     (scale :min 0
                            :max 101
                            :active {onchange != ""}
                            :value value
                            :onchange onchange
                     )
                )
           )
)

(defwidget spacer-v-core [class]
           (box :class class
                :orientation "v"
                :space-evenly false
           )
)

(defwidget spacer-h-core [class]
           (box :class class
                :orientation "h"
                :space-evenly false
           )
)

(defwidget spacer-v []
           (spacer-v-core :class "spacer-v")
)

(defwidget spacer-h []
           (spacer-h-core :class "spacer-h")
)

(defwidget brightness-slider []
           (metric :label "󰃠 "
                   :value brightness
                   :onchange "scripts/set_brightness {}%"
           )
)

(defwidget output-volume-slider []
           (metric :label output-volume-icon
                   :value output-volume
                   :onchange "scripts/set_output_volume {}%"
                   :onclick "scripts/toggle_output_mute"
           )
)

(defwidget input-volume-slider []
           (metric :label input-volume-icon
                   :value input-volume
                   :onchange "scripts/set_input_volume {}%"
                   :onclick "scripts/toggle_input_mute"
           )
)

(defwidget bar-menu-sliders []
           (box :class "bar-menu-sliders"
                :orientation "v"
                :space-evenly false
                :halign "center"
                (brightness-slider)
                (output-volume-slider)
                (input-volume-slider)
           )
)

(defwidget bmb [onclick label]
           (button :class "bar-menu-button"
                   :onclick onclick
                   label
           )
)

(defwidget update-rice-button []
           (bmb :onclick "scripts/update_rice"
                :label "Update Rice"
           )
)

(defwidget bar-menu-buttons []
           (box :class "bar-menu-buttons"
                :orientation "v"
                :space-evenly false
                :halign "center"
                (box :class "sbr-1"
                     :orientation "h"
                     :space-evenly true
                     (update-rice-button)
                )
           )
)

(defwidget bar-menu-spacer []
           (box :class "bar-menu-spacer"
                :orientation "v"
                :space-evenly true
           )
)

(defwidget bar-menu []
           (box :space-evenly false
                :orientation "v"
                :class "bar-menu"
                (bar-menu-sliders)
           )
)

(defwidget powermenu-button [label onclick ?class]
           (button :class "powermenu-button ${class}"
                   :onclick onclick
                   label
           )
)

(defwidget powermenu-lockscreen-button []
          (powermenu-button :label ""
                            :onclick "scripts/lockscreen"
                            :class "powermenu-lockscreen-button"
          )
)

(defwidget powermenu-logout-button []
          (powermenu-button :label "󰍃"
                            :onclick "scripts/logout"
                            :class "powermenu-logout-button"
          )
)

(defwidget powermenu-poweroff-button []
          (powermenu-button :label ""
                            :onclick "poweroff"
                            :class "powermenu-poweroff-button"
          )
)

(defwidget powermenu-reboot-button []
          (powermenu-button :label " "
                            :onclick "reboot"
                            :class "powermenu-reboot-button"
          )
)

(defwidget powermenu-window []
           (box :space-evenly false
                :orientation "v"
                :class "powermenu-window"
                uptime
                (spacer-v-core :class "powermenu-spacer-v")
                (box :space-evenly true
                     :orientation "h"
                     :class "powermenu-window-button-area"
                     (powermenu-lockscreen-button)
                     (powermenu-logout-button)
                     (powermenu-poweroff-button)
                     (powermenu-reboot-button)
                )
           )
)

(defwidget workspaces-module []
           (box :class "workspaces-module"
                :orientation "h"
                :space-evenly false
                (for i in workspaces-json
                          (button :onclick "hyprctl dispatch workspace ${i}"
                                  :class "workspace-button"
                                  "${i}"
                          )
                )
           )
)

(defwidget window-module []
           (box :class "window-module"
                :orientation "h"
                :space-evenly false
                window-title
           )
)

(defwidget bar-modules-left []
           (box :class "bar-modules-left"
                :orientation "h"
                :space-evenly false
                :halign "start"
                (workspaces-module)
                (window-module)
           )
)

(defwidget bar-modules-center []
           (box :class "bar-modules-center"
                :orientation "h"
                :space-evenly false
                :halign "center"
           )
)

(defwidget bar-modules-right []
           (box :class "bar-modules-right"
                :orientation "h"
                :space-evenly false
                :halign "end"
           )
)

(defwidget bar []
           (box :class "bar"
                :orientation "h"
                :space-evenly false
                (bar-modules-left)
                (bar-modules-center)
                (bar-modules-right)
           )
)

(defwidget close-button [onclick]
           (button :class "close-button"
                   :onclick onclick
                   ""
           )
)

(defwidget titlebar [?title close-button-onclick]
           (box :class "titlebar"
                :orientation "h"
                :space-evenly true
                (box :class "titlebar-title"
                     :orientation "h"
                     :space-evenly false
                     :halign "start"
                     title
                )
                (box :class "titlebar-buttons-box"
                     :orientation "h"
                     :space-evenly false
                     :halign "end"
                     (close-button :onclick "${close-button-onclick}")
                )
           )
)

(defwidget keybinds []
           (box :class "keybinds-parent-box"
                :orientation "v"
                :space-evenly false
                (titlebar :title "Keybinds Guide" :close-button-onclick "scripts/self close keybinds")
                (scroll :class "keybinds"
                        :orientation "v"
                        :space-evenly false
                        keybinds
                )
           )
)

(defwidget rice-update-available []
           (box :class "rice-update-available"
                :orientation "h"
                :space-evenly false
                "Rice Update Available"
           )
)



(defwindow rice-update-available
           :monitor 0
           :geometry (geometry :x "10px"
                               :y "10px"
                               :width "100px"
                               :height "20px"
                               :anchor "top right"
           )
           :stacking "bg"
           :windowtype "normal"
           :wm-ignore true
           (rice-update-available)
)

(defwindow keybinds
           :monitor 0
           :geometry (geometry :x "0px"
                               :y "0px"
                               :width "70%"
                               :height "0px"
                               :anchor "center"
                     )
           :stacking "fg"
           :windowtype "normal"
           :wm-ignore true
           (keybinds)
)

(defwindow bar-menu
           :monitor 0
           :geometry (geometry :x "10px"
                               :y "10px"
                               :width "400px"
                               :height "0px"
                               :anchor "top right"
                     )
           :stacking "fg"
           :windowtype "normal"
           :wm-ignore true
           (bar-menu)
)

(defwindow powermenu-window
           :monitor 0
           :geometry (geometry :x "0px"
                               :y "10px"
                               :width "500px"
                               :height "0px"
                               :anchor "top center"
                     )
           :stacking "fg"
           :windowtype "normal"
           :wm-ignore true
           (powermenu-window)
)

(defwindow bar
           :monitor 0
           :geometry (geometry :x "0px"
                               :y "0px"
                               :width "100%"
                               :height "41px"
                               :anchor "top center"
                     )
           :stacking "fg"
           :windowtype "dock"
           :wm-ignore false
           :exclusive true
           (bar)
)
